---
title: "pubg_api_test"
format: html
editor: visual
---

```{r}
# install.packages("devtools")
# install_github("lazyjustin/rPUBG")
# 
library(devtools)
# library(rPUBG)
library(httr) # making HTTP requests to web APIs and web servers
library(jsonlite) #to read json files
library(urltools)
library(tidyverse)
library(dplyr)
```

```{r}
api_key <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ZTNlOGE0MC03N2IxLTAxM2QtNWRjNy0xYWNkNDhkZWFmNTAiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNzMwMTU3Njk4LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6InN0YXQyMTIifQ.T8ZFS6OssVUPJRwU8I-l5-tokA3TZGCov7NnYNPOnP8"
```

```{r function}
get_info <- function(url, api_key){
  Sys.sleep(7)
  response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    data <- fromJSON(content(response, as = "text"))
    # Print or process the seasons data
    # print(data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}
  
  return(data)
}


get_players <- function(url, api_key){
  
  print(url)

  match_data <- get_info(url, api_key)

  match <- match_data$included$attributes$stats
  
  if (!is.null(match)){

  match <- match %>% 
    filter(!is.na(playerId), str_detect(playerId, "account")) 
 }
  
  

}
```

# GETTING A LIST OF SEASONS

```{r}
# Define the endpoint for seasons
url_season <- "https://api.pubg.com/shards/steam/seasons"


get_info(url_season, api_key)

```

```{r}
url <- "https://api.pubg.com/shards/pc-na/leaderboards/division.bro.official.2017-pre9/squad"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    players_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(players_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}

```

```{r}
samplePlayer <- players_data$data$id
```

# GETTING SAMPLE MATCHES (1K)

```{r}
url_sample_matches <- "https://api.pubg.com/shards/steam/samples"

samples <- get_info(url_sample_matches, api_key)


```

```{r}
sample_match_list <- samples$data$relationships$matches$data$id
sample_match_list[1:10]
```

```{r}

```

# GETTING PLAYERS FOR A MATCH

```{r}

url <- "https://api.pubg.com/shards/steam/matches/d68e4939-1c1d-413d-973f-ac3d9ceedd7d"

get_players <- function(url, api_key){

  match_data <- get_info(url, api_key)

  match <- match_data$included$attributes$stats

  match <- match %>% 
    filter(!is.na(playerId), str_detect(playerId, "account")) 
  
  return(match)

}
```

```{r}
#match <- match_data$included$attributes$stats

#match %>% 
  filter(!is.na(playerId), str_detect(playerId, "account")) 
```

```{r}
match %>% 
  View()
```

```{r}
 #match_data$included$relationships$participants$data
```

```{r}
#View(roster$attributes) 
```

# GETTING LIFETIME STATS FOR A PLAYER

```{r}
url <- "https://api.pubg.com/shards/steam/players/account.cfbdfcdb42324279a9f37d62c201c2ae/seasons/lifetime"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    lifetime_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(lifetime_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}

```

# WEAPON MASTERY

```{r}
get_data <- function (url){
  
  # Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    return(data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}
}
```

#SURVIVAL MASTER

```{r}

survival_url <- "/players//survival_mastery
"
get_info
```

```{r}
url <- "https://api.pubg.com/shards/steam/players/account.cfbdfcdb42324279a9f37d62c201c2ae/weapon_mastery"

weapon <- get_data(url)
```

```{r}
weapon$data$attributes$weaponSummaries$Item_Weapon_ACE32_C
```

```{r}
data.frame(weapon$data$attributes$weaponSummaries$Item_Weapon_AK47_C$StatsTotal)
```

##GET PLAYID

```{r}
sample_match_url <- str_c("https://api.pubg.com/shards/steam/matches/", sample_match_list)


sample_subset <- sample_match_url[300:310]
```

```{r}
get_players("https://api.pubg.com/shards/steam/matches/a54e0516-e923-4f14-a014-35807b4d3ff1", api_key)
```

```{r eval = FASLE}
df_list_500 <- map2(sample_match_url[1:500], api_key, get_players)
```

```{r eval = FASLE}
df_list_501_1000 <- map2(sample_match_url[501:1000], api_key, get_players)
```

```{r eval = FASLE}
df_list_1001_end <- map2(sample_match_url[1001: length(sample_match_url)], api_key, get_players)
```

```{r}
#test <- get_players("https://api.pubg.com/shards/steam/matches/fd964b13-3177-4476-939c-c83aaca3c581", api_key)

#length()

#players_500 <- map_dfr(df_list_500, ~.x)

#players_500 %>% 
  distinct(playerId)
  
```

```{r}
#is.null(test$included$attributes$stats)
```

#get lidetime stats for 10 players

```{r}
url_player_10 <- "https://api.pubg.com/shards/steam/seasons/lifetime/gameMode/squad/players?filter[playerIds]=account.3bf45db9168f4894979793acaa48b3cb,account.ae059aa7089041739d160b4870516d8c"


multi_player <- get_info(url_player_10, api_key)
```

```{r}
names(multi_player$data$attributes$gameModeStats$squad)
```

```{r}
multi_player$data$relationships$season$data
```

```{r}
# total <- c(df_list_500, df_list_501_1000, df_list_1001_end)
# length(total)
# df <- map_dfr(total, ~.x)

df %>% 
  distinct(playerId) 

# 
# df %>% 
#   write_csv("../data/playerStatsRand.csv")
```

```{r}
names(df)
```

```{r}
# walk distance and time survived => log relationship
df %>% 
  ggplot(aes(x = timeSurvived, y = damageDealt, color = deathType))+
  geom_point()+
  geom_smooth()
```

```{r}
df %>% 
  ggplot(aes(x = revives, y = damageDealt))+
  geom_point()
```

```{r}
levels <- as.character(c(0:19))
df %>% 
  filter(damageDealt < 3000) %>% 
  ggplot(aes(y = damageDealt, x = fct_relevel(as.character(DBNOs), levels)))+
  geom_boxplot()+
  labs(x = "Knocks by player",
       y = "Damage player dealt",
       title = "Relationship Between Amount of Damage Dealt and Number of Knocks ",
       caption = "PUBG API")
```

context: pubg api, a random sample of players across multiple matches

add some pointer to highlight outliers

17 is missing -\> make it consistent

explain what a knock is

talk about the skewness of data being shown

get rid of the grid lines, maybe add color?

```{r}
df %>% 
  ggplot(aes(y = damageDealt))+
  geom_col()
```

```{r}

```

=\> More knocks =\> strong correlation with damanage dealt.

# Vizualization

```{r}
# Boxplot: Relationship Between Knocks (DBNOs) and Damage Dealt
library(ggplot2)
library(forcats) # For categorical variable manipulation

# make data frame of weapon
# Extract weaponSummaries
weapon_summaries <- weapon$data$attributes$weaponSummaries

# Extract weapon names (keys of the list)
weapon_names <- names(weapon_summaries)

# Convert the nested list into a dataframe
weapon_df <- map2_dfr(weapon_names, weapon_summaries, ~{
  weapon_data <- as.data.frame(t(.y))  # Convert nested list to a dataframe
  weapon_data$weapon <- .x            # Add weapon name as a column
  return(weapon_data)
})

# View the resulting dataframe
print(weapon_df)


# Ensure all levels of DBNOs are included
levels <- as.character(0:19) # Adjust to include full range

# Ensure numeric columns (e.g., damageDealt) are properly converted
weapon_df <- weapon_df %>% mutate(across(where(is.character), as.numeric))
```

```{r}
library(tidyverse)

# Extract and flatten StatsTotal into a dataframe
flatten_stats_total <- function(stats_list) {
  map_dfr(stats_list, ~ as.data.frame(t(unlist(.x)), stringsAsFactors = FALSE))
}

# Flatten the StatsTotal column in weapon_df
stats_df <- flatten_stats_total(weapon_df$StatsTotal)

# Combine the flattened stats with the original data
# Drop the original StatsTotal column to avoid duplication
final_weapon_df <- weapon_df %>%
  select(-StatsTotal) %>%
  bind_cols(stats_df)

# View the final dataframe
print(final_weapon_df)

```



```{r}
library(ggplot2)

# Scatterplot with weapon labels
ggplot(final_weapon_df, aes(x = as.numeric(DamagePlayer), y = as.numeric(Kills), label = weapon)) +
  geom_point(size = 3, alpha = 0.7, color = "grey50") +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
  geom_text(vjust = -0.5, hjust = 0.5, size = 3, check_overlap = TRUE) + # Add labels with overlap check
  labs(
    x = "Total Damage",
    y = "Total Kills",
    title = "Relationship Between Damage and Kills by Weapon",
    subtitle = "Labels Indicate Weapon Names",
    caption = "Source: PUBG API"
  ) +
  theme_minimal()

```

```{r}
finals_weapon_df <- final_weapon_df %>%
  mutate(
    TierCurrent = as.numeric(unlist(TierCurrent)),  # Convert TierCurrent to numeric
    Kills = as.numeric(unlist(Kills)),             # Ensure Kills is numeric
    DamagePlayer = as.numeric(unlist(DamagePlayer)) # Ensure DamagePlayer is numeric
  )

ggplot(finals_weapon_df, aes(x = as.factor(TierCurrent), y = Kills, fill = as.factor(TierCurrent))) +
  geom_bar(stat = "identity") +
  labs(
    x = "Tier",
    y = "Total Kills",
    title = "Total Kills by Tier",
    subtitle = "PUBG Player Performance by Tier",
    caption = "Source: PUBG API"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

```



