---
title: "pubg_api_test"
format: html
editor: visual
---

```{r}
# install.packages("devtools")
# install_github("lazyjustin/rPUBG")
# 
# library(devtools)
# library(rPUBG)
library(httr) # making HTTP requests to web APIs and web servers
library(jsonlite) #to read json files
library(urltools)
```

API key: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIyOWUyNTdmMC03MjBhLTAxM2QtNjBmNS0xNjVmNmJlZjNhYmMiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNzI5NTM2MTU1LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6Ii1mNzhjOGRkOC03ODAxLTRlZGUtYjJhNC0zMTM4YTc4MDhmMWUifQ.kE-hg_GLzdV-kieHrtv0w7jEG0WhFknHbZ8VNlrujyE

```{r}
api_key <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlNjI0NjI4MC03MjMyLTAxM2QtOGU4MS0yMjViNDYzNmQwYzgiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNzI5NTUzNjUxLCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6InB1YmdfYXBpXzIifQ.TPRaU-Yrrai0kza1Wb8-Kg8gBIy__hz37cStm24B1xI"
```

# GETTING A LIST OF SEASONS

```{r}
# Define the endpoint for seasons
url <- "https://api.pubg.com/shards/steam/seasons"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    seasons_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(seasons_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}


```

```{r}
url <- "https://api.pubg.com/shards/pc-na/leaderboards/division.bro.official.2017-pre9/squad"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    players_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(players_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}

```

```{r}
players_data$data$id
```

# GETTING SAMPLE MATCHES (1K)

```{r}
url <- "https://api.pubg.com/shards/steam/samples"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    players_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(players_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}

```

# GETTING PLAYERS FOR A MATCH

```{r}

url <- "https://api.pubg.com/shards/steam/matches/d7433a22-27b7-4b1b-a34c-6b2b23c49f76"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    match_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(match_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}


```

```{r}
library(tidyverse)
```

```{r}
match <- match_data$included$attributes$stats
```

```{r}
match %>% 
  View()
  
  
```

```{r}
 match_data$included$relationships$participants$data
```

```{r}
View(roster$attributes) 
```

# GETTING LIFETIME STATS FOR A PLAYER

```{r}
url <- "https://api.pubg.com/shards/steam/players/account.cfbdfcdb42324279a9f37d62c201c2ae/seasons/lifetime"

# Make the GET request
response <- GET(url, add_headers(`Authorization` = paste("Bearer", api_key),
                                  `Accept` = "application/vnd.api+json"))

# Check for a successful response
if (status_code(response) == 200) {
    # Parse the JSON response
    lifetime_data <- fromJSON(content(response, as = "text"))
    
    # Print or process the seasons data
    print(lifetime_data)
} else {
    # Print the error message
    print(paste("Error:", status_code(response)))
    print(content(response, as = "text"))
}

```

```{r}
data.frame(lifetime_data$data$attributes$gameModeStats$squad)
```
