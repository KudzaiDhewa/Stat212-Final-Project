---
title: "Weapons Mastery"
format: html
editor: visual
---

## Libraries

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(forcats)
```

## Player IDs

```{r}
# setwd("~/Desktop/COMP_STAT_212/project/Stat212_Project1/code")
playerID <- read_csv("../players.csv")
```

## API
### API key
```{r}
api_key <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ZTNlOGE0MC03N2IxLTAxM2QtNWRjNy0xYWNkNDhkZWFmNTAiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNzMwMTU3Njk4LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6InN0YXQyMTIifQ.T8ZFS6OssVUPJRwU8I-l5-tokA3TZGCov7NnYNPOnP8"
```

### API call
```{r}
# Function to call the API and handle responses
get_info <- function(url, api_key) {
  Sys.sleep(7)
  
  tryCatch({
    response <- GET(url, 
                    add_headers(`Authorization` = paste("Bearer", api_key),
                                `Accept` = "application/vnd.api+json"))
    stop_for_status(response)
    
    # Parse JSON data
    data <- fromJSON(content(response, as = "text"))
    return(data)
  }, error = function(e) {
    print(paste("Error for URL:", url, "Message:", e$message))
    return(NULL)
  })
}
```

## SAMPLE PLAYER
```{r}
samplePlayer <- "account.cfbdfcdb42324279a9f37d62c201c2ae"
```

### Weapons mastery
```{r}
url <- paste("https://api.pubg.com/shards/steam/players/",samplePlayer,"/weapon_mastery", sep = "")
sampleWeaponsMastery <- get_info(url, api_key)
```

### Weapons summary

Get weapons summary from mastery
```{r}
sampleWeaponsSumm <- as_tibble(sampleWeaponsMastery$data$attributes$weaponSummaries)

sampleWeaponsNames <- names(sampleWeaponsSumm)

sampleWeaponsDF <- map2_dfr(sampleWeaponsNames, sampleWeaponsSumm, ~{
  weapons<- as.data.frame(t(.y))
  weapons$weapon <- .x
  return(weapons)
})
```

### Flatten data

Split each `StatsTotal`, `OfficialStatsTotal`, and `CompetitiveStatsTotal` lists from `sampleWeaponsDF` into separate columns
```{r}
flattenStats <- function(stats_list) {
  map_dfr(stats_list, ~ as.data.frame(t(unlist(.x)), stringsAsFactors = FALSE))
}

statsData <- flattenStats(sampleWeaponsDF$StatsTotal)
officialStatsData <- flattenStats(sampleWeaponsDF$OfficialStatsTotal)
competitiveStatsData <- flattenStats(sampleWeaponsDF$CompetitiveStatsTotal)

sampleWeaponsDF <- sampleWeaponsDF %>%
  select(-StatsTotal) %>%
  select(-OfficialStatsTotal) %>%
  select(-CompetitiveStatsTotal) %>%
  bind_cols(statsData) %>%
  bind_cols(officialStatsData) %>%
  bind_cols(competitiveStatsData)
```

### Data cleaning 1

Clean data by combining and summarizing the average stat of weapons mastery for sample player
```{r}
colnames(sampleWeaponsDF) <- gsub("\\.\\.\\.\\d+$", "", colnames(sampleWeaponsDF))

unique_names <- unique(colnames(sampleWeaponsDF))

sampleWeaponsDF <- unique_names %>%
  map_dfc(~ {
    cols <- select(sampleWeaponsDF, all_of(.x))
    cols <- cols %>% mutate(across(everything(), as.numeric, .names = "converted_{.col}")) 
    if (all(sapply(cols, is.numeric))) {
      tibble(!!sym(.x) := rowMeans(cols, na.rm = TRUE))
    } else {
      tibble(!!sym(.x) := cols[[1]])
    }
  })
```

### Data cleaning 2
```{r}
sampleWeaponsDF <- sampleWeaponsDF %>%
  select(-Medals)

sampleWeaponsDF$weapon <- gsub("Item_Weapon_", "", sampleWeaponsDF$weapon) %>%
  gsub("_C", "", .)
```


## BATCH PLAYERS
### Function
```{r}
# Function to get weapons mastery for all players in the playerID list and compile as a list of dataframes
urls <- paste("https://api.pubg.com/shards/steam/players/",playerID$playerId,"/weapon_mastery", sep = "")

# calling all the data wrangling functions from above
weapon_data <- function(url,api_key){
  orig <- get_info(url,api_key)
  # wrangle
  # return as a row in a data set 
}


# batch_weapons <- map(urls, weapon_data, api_key)
```

```{r}
# Function to clean weapons mastery data for each players
clean_weapons_data <- function(playerWeapons) {
  playerWeaponsDF <- map(playerWeapons, ~{
    playerWeaponSumm <- as_tibble(.x$data$attributes$weaponSummaries)
    weaponNames <- names(playerWeaponSumm)
    
    playerWeaponsDF <- map2_dfr(weaponNames, playerWeaponSumm, ~{
      weapon_data <- as.data.frame(t(.y))
      weapon_data$weapon <- .x
      return(weapon_data)
    })
    
    StatsDF <- flatten_stats_total(playerWeaponsDF$StatsTotal)
    OfficialStatsDF <- flatten_stats_total(playerWeaponsDF$OfficialStatsTotal)
    CompetitiveStatsDF <- flatten_stats_total(playerWeaponsDF$CompetitiveStatsTotal)
    
    playerWeaponsDF <- playerWeaponsDF %>%
      select(-StatsTotal) %>%
      select(-OfficialStatsTotal) %>%
      select(-CompetitiveStatsTotal) %>%
      bind_cols(StatsDF) %>%
      bind_cols(OfficialStatsDF) %>%
      bind_cols(CompetitiveStatsDF)
    
    colnames(playerWeaponsDF) <- gsub("\\.\\.\\.\\d+$", "", colnames(playerWeaponsDF))
    
    unique_names <- unique(colnames(playerWeaponsDF))
    
    playerWeaponsDF_cleaned <- unique_names %>%
      map_dfc(~ {
        cols <- select(playerWeaponsDF, all_of(.x))
        cols <- cols %>% mutate(across(everything(), as.numeric, .names = "converted_{.col}")) 
        if (all(sapply(cols, is.numeric))) {
          tibble(!!sym(.x) := rowMeans(cols, na.rm = TRUE))
        } else {
          tibble(!!sym(.x) := cols[[1]])
        }
      })
    
    playerWeaponsDF_cleaned <- playerWeaponsDF_cleaned %>%
      select(-Medals)
    
    playerWeaponsDF_cleaned$weapon <- gsub("Item_Weapon_", "", playerWeaponsDF_cleaned$weapon) %>%
      gsub("_C", "", .)
    
    return(playerWeaponsDF_cleaned)
  })
  
  return(playerWeaponsDF)
}

# Get all players weapons mastery
allPlayersWeapons <- get_all_players_weapons(playerID, api_key) %>%
  clean_weapons_data()
```

### All players' weapons mastery data combined

## Data viz
```{r}
library(ggplot2)
library(gapminder)
theme_set(theme_bw())

allPlayersWeaponsDF %>%
  ggplot(aes(x = weapon, y = converted_Kills, fill = playerID)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title = "Average Kills per Weapon Mastery",
       x = "Weapon",
       y = "Average Kills",
       fill = "Player ID")
```

